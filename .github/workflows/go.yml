name: Go Cross-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*.*.*"  # 针对版本标签发布
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write   # 必须的权限，用于创建发布

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: darwin
            arch: 386
          - os: windows
            arch: armv7
          - os: windows
            arch: armv9
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cross-Compile
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        echo "Building for $GOOS/$GOARCH"
        OUTPUT_NAME="${{ matrix.os }}-${{ matrix.arch }}"
        if [ "$GOOS" = "windows" ]; then
          OUTPUT_NAME+=".exe"
        fi
        mkdir -p build
        go build -o build/$OUTPUT_NAME ./...

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}
        path: build/$OUTPUT_NAME

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'  # 仅在 push 或手动触发时运行
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        path: release_assets/

    - name: Parse Version Tag
      id: vars
      run: |
        echo "Parsing version tag..."
        TAG=${GITHUB_REF/refs\/tags\//}
        SEMVER_RE='^\(v[0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)\(.*\)'
        if [[ "$TAG" =~ $SEMVER_RE ]]; then
          TAG_MAJOR=${BASH_REMATCH[1]}
          TAG_MINOR=${BASH_REMATCH[2]}
          TAG_PATCH=${BASH_REMATCH[3]}
          TAG_SPECIAL=${BASH_REMATCH[4]}
          echo "tag_major=${TAG_MAJOR}" >> $GITHUB_ENV
          echo "tag_minor=${TAG_MINOR}" >> $GITHUB_ENV
          echo "tag_patch=${TAG_PATCH}" >> $GITHUB_ENV
          echo "tag_special=${TAG_SPECIAL}" >> $GITHUB_ENV
        else
          echo "tag_major=v0" >> $GITHUB_ENV
          echo "tag_minor=0" >> $GITHUB_ENV
          echo "tag_patch=0" >> $GITHUB_ENV
          echo "tag_special=" >> $GITHUB_ENV
        fi

    - name: Prepare Release Assets
      run: |
        mkdir -p release_assets_flat
        find release_assets/ -type f -exec cp {} release_assets_flat/ \;

    - name: Upload to GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release_assets_flat/*"
        tag: ${{ github.ref_name || 'v1.0.0' }}
        releaseName: "Release ${{ github.ref_name || 'v1.0.0' }}"
        body: |
          Version: ${{ github.ref_name }}
          Major: ${{ env.tag_major }}
          Minor: ${{ env.tag_minor }}
          Patch: ${{ env.tag_patch }}
          Special: ${{ env.tag_special }}
        draft: false
        prerelease: ${{ env.tag_special != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
