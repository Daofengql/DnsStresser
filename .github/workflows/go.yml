name: Go Cross-Platform Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64, 386, arm]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set up Git user
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Cross-Compile
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        GOARM: ${{ matrix.arm_version || '' }}
      run: |
        echo "Building for $GOOS/$GOARCH"
        mkdir -p build/$GOOS-$GOARCH
        go build -o build/$GOOS-$GOARCH/main ./...

    - name: Collect Build Artifacts
      run: |
        mkdir -p artifacts
        cp -r build/* artifacts/
      shell: bash

    - name: Get Commit Info
      id: get_commit
      run: |
        echo "commit_msg=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
        echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Generate Version Tag
      id: generate_tag
      run: echo "tag=v${{ github.run_number }}" >> $GITHUB_ENV

    - name: Upload to GitHub Release
      if: ${{ matrix.os == 'linux' && matrix.arch == 'amd64' }}
      uses: ncipollo/release-action@v1
      with:
        artifacts: "artifacts/**/*"
        tag: ${{ env.tag }}
        releaseName: "Release ${{ env.tag }}"
        body: |
          Commit: ${{ env.commit_sha }}
          Changes:
          ${{ env.commit_msg }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
